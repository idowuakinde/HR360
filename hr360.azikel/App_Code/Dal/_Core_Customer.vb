'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


NameSpace DbEntities

#Region " Schema "

    Public Class Core_CustomerSchema
        Inherits NCI.EasyObjects.Schema

        Private Shared _entries As ArrayList
        Public Shared CustomerId As New SchemaItem("CustomerId", DbType.Int64, True, False, False, True, False, False)
        Public Shared CustomerRef As New SchemaItem("CustomerRef", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
        Public Shared CustomerCode As New SchemaItem("CustomerCode", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, True)
        Public Shared DateOfBirth As New SchemaItem("DateOfBirth", DbType.DateTime, False, False, False, False, False, False)
        Public Shared Email As New SchemaItem("Email", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
        Public Shared Telephone As New SchemaItem("Telephone", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
        Public Shared MaritalStatus As New SchemaItem("MaritalStatus", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, False, False, False, False)
        Public Shared Firstname As New SchemaItem("Firstname", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
        Public Shared Middlename As New SchemaItem("Middlename", DbType.AnsiString, SchemaItemJustify.None, 50, True, False, False, False)
        Public Shared Surname As New SchemaItem("Surname", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
        Public Shared Password As New SchemaItem("Password", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
        Public Shared ResidenceStreet As New SchemaItem("ResidenceStreet", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
        Public Shared ResidenceStateId As New SchemaItem("ResidenceStateId", DbType.Int32, False, False, False, False, False, False)
        Public Shared ResidenceCountryId As New SchemaItem("ResidenceCountryId", DbType.Int32, False, False, False, False, False, False)
        Public Shared Sex As New SchemaItem("Sex", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, False, False, False, False)
        Public Shared DepartmentId As New SchemaItem("DepartmentId", DbType.Int32, False, False, False, False, False, False)

        Public Overrides ReadOnly Property SchemaEntries() As ArrayList
            Get
                If _entries Is Nothing Then
                    _entries = New ArrayList()
                    _entries.Add(Core_CustomerSchema.CustomerId)
                    _entries.Add(Core_CustomerSchema.CustomerRef)
                    _entries.Add(Core_CustomerSchema.CustomerCode)
                    _entries.Add(Core_CustomerSchema.DateOfBirth)
                    _entries.Add(Core_CustomerSchema.Email)
                    _entries.Add(Core_CustomerSchema.Telephone)
                    _entries.Add(Core_CustomerSchema.MaritalStatus)
                    _entries.Add(Core_CustomerSchema.Firstname)
                    _entries.Add(Core_CustomerSchema.Middlename)
                    _entries.Add(Core_CustomerSchema.Surname)
                    _entries.Add(Core_CustomerSchema.Password)
                    _entries.Add(Core_CustomerSchema.ResidenceStreet)
                    _entries.Add(Core_CustomerSchema.ResidenceStateId)
                    _entries.Add(Core_CustomerSchema.ResidenceCountryId)
                    _entries.Add(Core_CustomerSchema.Sex)
                    _entries.Add(Core_CustomerSchema.DepartmentId)
                End If
                Return _entries
            End Get
        End Property

        Public Shared ReadOnly Property HasAutoKey() As Boolean
            Get
                Return True
            End Get
        End Property

        Public Shared ReadOnly Property HasRowID() As Boolean
            Get
                Return False
            End Get
        End Property

    End Class

#End Region

    Public MustInherit Class _Core_Customer
        Inherits EasyObject

        Sub New()
            Dim _schema As New Core_CustomerSchema()
            Me.SchemaEntries = _schema.SchemaEntries
            Me.SchemaGlobal = "dbo"
        End Sub

        Public Overrides Sub FlushData()
            Me._whereClause = Nothing
            Me._aggregateClause = Nothing
            MyBase.FlushData()
        End Sub

        ''' <summary>
        ''' Loads the business object with info from the database, based on the requested primary key.
        ''' </summary>
        ''' <param name="CustomerId"></param>
        ''' <returns>A Boolean indicating success or failure of the query</returns>
        Public Function LoadByPrimaryKey(ByVal CustomerId As Long) As Boolean

            Select Case Me.DefaultCommandType
                Case CommandType.StoredProcedure
                    Dim parameters As ListDictionary = New ListDictionary

                    ' Add in parameters
                    parameters.Add(Core_CustomerSchema.CustomerId.FieldName, CustomerId)

                    Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Select_Core_Customer", parameters, CommandType.StoredProcedure)

                Case CommandType.Text
                    Me.Query.ClearAll()
                    Me.Where.WhereClauseReset()
                    Me.Where.CustomerId.Value = CustomerId
                    Return Me.Query.Load()

                Case Else
                    Throw New ArgumentException("Invalid CommandType", "commandType")

            End Select

        End Function

        ''' <summary>
        ''' Loads all records from the table.
        ''' </summary>
        ''' <returns>A Boolean indicating success or failure of the query</returns>
        Public Function LoadAll() As Boolean

            Select Case Me.DefaultCommandType

                Case CommandType.StoredProcedure
                    Dim parameters As ListDictionary = Nothing
                    Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_SelectAll_Core_Customer", parameters, CommandType.StoredProcedure)

                Case CommandType.Text
                    Me.Query.ClearAll()
                    Me.Where.WhereClauseReset()
                    Return Me.Query.Load()

                Case Else
                    Throw New ArgumentException("Invalid CommandType", "commandType")

            End Select

        End Function

        ''' <summary>
        ''' Adds a new record to the internal table.
        ''' </summary>
        Public Overrides Sub AddNew()
            MyBase.AddNew()
            Me.ApplyDefaults()
        End Sub

        ''' <summary>
        ''' Apply any default values to columns
        ''' </summary>
        Protected Overrides Sub ApplyDefaults()
            Me.CustomerCode = Guid.NewGuid.ToString
        End Sub

        Protected Overrides Function GetInsertCommand(ByVal commandType As CommandType) As DbCommand

            Dim dbCommand As DbCommand

            ' Create the Database object, using the default database service. The
            ' default database service is determined through configuration.
            Dim db As Database = GetDatabase()

            Select Case commandType

                Case commandType.StoredProcedure
                    Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Insert_Core_Customer"
                    dbCommand = db.GetStoredProcCommand(sqlCommand)

                    db.AddParameter(dbCommand, "CustomerId", DbType.Int64, 0, ParameterDirection.Output, True, 0, 0, "CustomerId", DataRowVersion.Default, Convert.DBNull)
                    CreateParameters(db, dbCommand)

                Case commandType.Text
                    Me.Query.ClearAll()
                    Me.Where.WhereClauseReset()
                    For Each item As SchemaItem In Me.SchemaEntries
                        If Not item.IsComputed Then
                            If (item.IsAutoKey AndAlso Me.IdentityInsert) OrElse Not item.IsAutoKey Then
                                Me.Query.AddInsertColumn(item)
                            End If
                        End If
                    Next
                    dbCommand = Me.Query.GetInsertCommandWrapper()

                    dbCommand.Parameters.Clear()
                    If Me.IdentityInsert Then
                        db.AddInParameter(dbCommand, "CustomerId", DbType.Int64, "CustomerId", DataRowVersion.Default)
                    Else
                        db.AddParameter(dbCommand, "CustomerId", DbType.Int64, 0, ParameterDirection.Output, True, 0, 0, "CustomerId", DataRowVersion.Default, Convert.DBNull)
                    End If

                    CreateParameters(db, dbCommand)

                Case Else
                    Throw New ArgumentException("Invalid CommandType", "commandType")

            End Select

            Return dbCommand

        End Function

        Protected Overrides Function GetUpdateCommand(ByVal commandType As CommandType) As DbCommand

            Dim dbCommand As DbCommand

            ' Create the Database object, using the default database service. The
            ' default database service is determined through configuration.
            Dim db As Database = GetDatabase()

            Select Case commandType

                Case commandType.StoredProcedure
                    Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Update_Core_Customer"
                    dbCommand = db.GetStoredProcCommand(sqlCommand)

                    db.AddInParameter(dbCommand, "CustomerId", DbType.Int64, "CustomerId", DataRowVersion.Current)
                    CreateParameters(db, dbCommand)

                Case commandType.Text
                    Me.Query.ClearAll()
                    For Each item As SchemaItem In Me.SchemaEntries
                        If Not (item.IsAutoKey OrElse item.IsComputed) Then
                            Me.Query.AddUpdateColumn(item)
                        End If
                    Next

                    Me.Where.WhereClauseReset()
                    Me.Where.CustomerId.Operator = WhereParameter.Operand.Equal
                    dbCommand = Me.Query.GetUpdateCommandWrapper()

                    dbCommand.Parameters.Clear()
                    CreateParameters(db, dbCommand)
                    db.AddInParameter(dbCommand, "CustomerId", DbType.Int64, "CustomerId", DataRowVersion.Current)

                Case Else
                    Throw New ArgumentException("Invalid CommandType", "commandType")

            End Select

            Return dbCommand

        End Function

        Protected Overrides Function GetDeleteCommand(ByVal commandType As CommandType) As DbCommand

            Dim dbCommand As DbCommand

            ' Create the Database object, using the default database service. The
            ' default database service is determined through configuration.
            Dim db As Database = GetDatabase()

            Select Case commandType

                Case commandType.StoredProcedure
                    Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Delete_Core_Customer"
                    dbCommand = db.GetStoredProcCommand(sqlCommand)

                    ' Add primary key parameters
                    db.AddInParameter(dbCommand, "CustomerId", DbType.Int64, "CustomerId", DataRowVersion.Current)

                Case commandType.Text
                    Me.Query.ClearAll()
                    Me.Where.WhereClauseReset()
                    Me.Where.CustomerId.Operator = WhereParameter.Operand.Equal
                    dbCommand = Me.Query.GetDeleteCommandWrapper()

                    dbCommand.Parameters.Clear()
                    db.AddInParameter(dbCommand, "CustomerId", DbType.Int64, "CustomerId", DataRowVersion.Current)

                Case Else
                    Throw New ArgumentException("Invalid CommandType", "commandType")

            End Select

            Return dbCommand

        End Function

        Private Sub CreateParameters(ByVal db As Database, ByVal dbCommand As DbCommand)

            db.AddInParameter(dbCommand, "CustomerCode", DbType.AnsiString, "CustomerCode", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "CustomerRef", DbType.AnsiString, "CustomerRef", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "DateOfBirth", DbType.DateTime, "DateOfBirth", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Email", DbType.AnsiString, "Email", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Telephone", DbType.AnsiString, "Telephone", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "MaritalStatus", DbType.AnsiStringFixedLength, "MaritalStatus", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Firstname", DbType.AnsiString, "Firstname", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Middlename", DbType.AnsiString, "Middlename", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Surname", DbType.AnsiString, "Surname", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Password", DbType.AnsiString, "Password", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "ResidenceStreet", DbType.AnsiString, "ResidenceStreet", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "ResidenceStateId", DbType.Int32, "ResidenceStateId", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "ResidenceCountryId", DbType.Int32, "ResidenceCountryId", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "Sex", DbType.AnsiStringFixedLength, "Sex", DataRowVersion.Current)
            db.AddInParameter(dbCommand, "DepartmentId", DbType.Int32, "DepartmentId", DataRowVersion.Current)

        End Sub

#Region " Properties "

        Public Overridable Property CustomerId() As Long
            Get
                Return Me.GetLong(Core_CustomerSchema.CustomerId.FieldName)
            End Get
            Set(ByVal Value As Long)
                Me.SetLong(Core_CustomerSchema.CustomerId.FieldName, Value)
            End Set
        End Property

        Public Overridable Property CustomerCode() As String
            Get
                Return Me.GetString(Core_CustomerSchema.CustomerCode.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.CustomerCode.FieldName, Value)
            End Set
        End Property

        Public Overridable Property CustomerRef() As String
            Get
                Return Me.GetString(Core_CustomerSchema.CustomerRef.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.CustomerRef.FieldName, Value)
            End Set
        End Property

        Public Overridable Property DateOfBirth() As DateTime
            Get
                Return Me.GetDateTime(Core_CustomerSchema.DateOfBirth.FieldName)
            End Get
            Set(ByVal Value As DateTime)
                Me.SetDateTime(Core_CustomerSchema.DateOfBirth.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Email() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Email.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Email.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Telephone() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Telephone.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Telephone.FieldName, Value)
            End Set
        End Property

        Public Overridable Property MaritalStatus() As String
            Get
                Return Me.GetString(Core_CustomerSchema.MaritalStatus.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.MaritalStatus.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Firstname() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Firstname.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Firstname.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Middlename() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Middlename.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Middlename.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Surname() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Surname.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Surname.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Password() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Password.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Password.FieldName, Value)
            End Set
        End Property

        Public Overridable Property ResidenceStreet() As String
            Get
                Return Me.GetString(Core_CustomerSchema.ResidenceStreet.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.ResidenceStreet.FieldName, Value)
            End Set
        End Property

        Public Overridable Property ResidenceStateId() As Integer
            Get
                Return Me.GetInteger(Core_CustomerSchema.ResidenceStateId.FieldName)
            End Get
            Set(ByVal Value As Integer)
                Me.SetInteger(Core_CustomerSchema.ResidenceStateId.FieldName, Value)
            End Set
        End Property

        Public Overridable Property ResidenceCountryId() As Integer
            Get
                Return Me.GetInteger(Core_CustomerSchema.ResidenceCountryId.FieldName)
            End Get
            Set(ByVal Value As Integer)
                Me.SetInteger(Core_CustomerSchema.ResidenceCountryId.FieldName, Value)
            End Set
        End Property

        Public Overridable Property Sex() As String
            Get
                Return Me.GetString(Core_CustomerSchema.Sex.FieldName)
            End Get
            Set(ByVal Value As String)
                Me.SetString(Core_CustomerSchema.Sex.FieldName, Value)
            End Set
        End Property

        Public Overridable Property DepartmentId() As Integer
            Get
                Return Me.GetInteger(Core_CustomerSchema.DepartmentId.FieldName)
            End Get
            Set(ByVal Value As Integer)
                Me.SetInteger(Core_CustomerSchema.DepartmentId.FieldName, Value)
            End Set
        End Property

        Public Overrides ReadOnly Property TableName() As String
            Get
                Return "Core_Customer"
            End Get
        End Property

#End Region

#Region " String Properties "
        Public Overridable Property s_CustomerId() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.CustomerId.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetLongAsString(Core_CustomerSchema.CustomerId.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.CustomerId.FieldName)
                Else
                    Me.CustomerId = MyBase.SetLongAsString(Core_CustomerSchema.CustomerId.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_CustomerCode() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.CustomerCode.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.CustomerCode.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.CustomerCode.FieldName)
                Else
                    Me.CustomerCode = MyBase.SetStringAsString(Core_CustomerSchema.CustomerCode.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_CustomerRef() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.CustomerRef.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.CustomerRef.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.CustomerRef.FieldName)
                Else
                    Me.CustomerRef = MyBase.SetStringAsString(Core_CustomerSchema.CustomerRef.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_DateOfBirth() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.DateOfBirth.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetDateTimeAsString(Core_CustomerSchema.DateOfBirth.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.DateOfBirth.FieldName)
                Else
                    Me.DateOfBirth = MyBase.SetDateTimeAsString(Core_CustomerSchema.DateOfBirth.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Email() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Email.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Email.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Email.FieldName)
                Else
                    Me.Email = MyBase.SetStringAsString(Core_CustomerSchema.Email.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Telephone() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Telephone.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Telephone.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Telephone.FieldName)
                Else
                    Me.Telephone = MyBase.SetStringAsString(Core_CustomerSchema.Telephone.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_MaritalStatus() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.MaritalStatus.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.MaritalStatus.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.MaritalStatus.FieldName)
                Else
                    Me.MaritalStatus = MyBase.SetStringAsString(Core_CustomerSchema.MaritalStatus.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Firstname() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Firstname.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Firstname.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Firstname.FieldName)
                Else
                    Me.Firstname = MyBase.SetStringAsString(Core_CustomerSchema.Firstname.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Middlename() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Middlename.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Middlename.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Middlename.FieldName)
                Else
                    Me.Middlename = MyBase.SetStringAsString(Core_CustomerSchema.Middlename.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Surname() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Surname.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Surname.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Surname.FieldName)
                Else
                    Me.Surname = MyBase.SetStringAsString(Core_CustomerSchema.Surname.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Password() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Password.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Password.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Password.FieldName)
                Else
                    Me.Password = MyBase.SetStringAsString(Core_CustomerSchema.Password.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_ResidenceStreet() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.ResidenceStreet.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.ResidenceStreet.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.ResidenceStreet.FieldName)
                Else
                    Me.ResidenceStreet = MyBase.SetStringAsString(Core_CustomerSchema.ResidenceStreet.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_ResidenceStateId() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.ResidenceStateId.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetIntegerAsString(Core_CustomerSchema.ResidenceStateId.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.ResidenceStateId.FieldName)
                Else
                    Me.ResidenceStateId = MyBase.SetIntegerAsString(Core_CustomerSchema.ResidenceStateId.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_ResidenceCountryId() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.ResidenceCountryId.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetIntegerAsString(Core_CustomerSchema.ResidenceCountryId.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.ResidenceCountryId.FieldName)
                Else
                    Me.ResidenceCountryId = MyBase.SetIntegerAsString(Core_CustomerSchema.ResidenceCountryId.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_Sex() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.Sex.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(Core_CustomerSchema.Sex.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.Sex.FieldName)
                Else
                    Me.Sex = MyBase.SetStringAsString(Core_CustomerSchema.Sex.FieldName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_DepartmentId() As String
            Get
                If Me.IsColumnNull(Core_CustomerSchema.DepartmentId.FieldName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetIntegerAsString(Core_CustomerSchema.DepartmentId.FieldName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(Core_CustomerSchema.DepartmentId.FieldName)
                Else
                    Me.DepartmentId = MyBase.SetIntegerAsString(Core_CustomerSchema.DepartmentId.FieldName, Value)
                End If
            End Set
        End Property


#End Region

#Region " Where Clause "
        Public Class WhereClause

            Public Sub New(ByVal entity As EasyObject)
                Me._entity = entity
            End Sub

            Public ReadOnly Property TearOff() As TearOffWhereParameter
                Get
                    If _tearOff Is Nothing Then
                        _tearOff = New TearOffWhereParameter(Me)
                    End If

                    Return _tearOff
                End Get
            End Property

#Region " TearOff's "
            Public Class TearOffWhereParameter

                Private _clause As WhereClause

                Public Sub New(ByVal clause As WhereClause)
                    Me._clause = clause
                End Sub

                Public ReadOnly Property CustomerId() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.CustomerId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property CustomerCode() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.CustomerCode)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property CustomerRef() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.CustomerRef)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property DateOfBirth() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.DateOfBirth)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Email() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Email)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Telephone() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Telephone)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property MaritalStatus() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.MaritalStatus)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Firstname() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Firstname)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Middlename() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Middlename)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Surname() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Surname)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Password() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Password)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property ResidenceStreet() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.ResidenceStreet)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property ResidenceStateId() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.ResidenceStateId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property ResidenceCountryId() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.ResidenceCountryId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property Sex() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.Sex)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

                Public ReadOnly Property DepartmentId() As WhereParameter
                    Get
                        Dim wp As WhereParameter = New WhereParameter(Core_CustomerSchema.DepartmentId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddWhereParameter(wp)
                        Return wp
                    End Get
                End Property

            End Class

#End Region

            Public ReadOnly Property CustomerId() As WhereParameter
                Get
                    If _CustomerId_W Is Nothing Then
                        _CustomerId_W = TearOff.CustomerId
                    End If
                    Return _CustomerId_W
                End Get
            End Property

            Public ReadOnly Property CustomerCode() As WhereParameter
                Get
                    If _CustomerCode_W Is Nothing Then
                        _CustomerCode_W = TearOff.CustomerCode
                    End If
                    Return _CustomerCode_W
                End Get
            End Property

            Public ReadOnly Property CustomerRef() As WhereParameter
                Get
                    If _CustomerRef_W Is Nothing Then
                        _CustomerRef_W = TearOff.CustomerRef
                    End If
                    Return _CustomerRef_W
                End Get
            End Property

            Public ReadOnly Property DateOfBirth() As WhereParameter
                Get
                    If _DateOfBirth_W Is Nothing Then
                        _DateOfBirth_W = TearOff.DateOfBirth
                    End If
                    Return _DateOfBirth_W
                End Get
            End Property

            Public ReadOnly Property Email() As WhereParameter
                Get
                    If _Email_W Is Nothing Then
                        _Email_W = TearOff.Email
                    End If
                    Return _Email_W
                End Get
            End Property

            Public ReadOnly Property Telephone() As WhereParameter
                Get
                    If _Telephone_W Is Nothing Then
                        _Telephone_W = TearOff.Telephone
                    End If
                    Return _Telephone_W
                End Get
            End Property

            Public ReadOnly Property MaritalStatus() As WhereParameter
                Get
                    If _MaritalStatus_W Is Nothing Then
                        _MaritalStatus_W = TearOff.MaritalStatus
                    End If
                    Return _MaritalStatus_W
                End Get
            End Property

            Public ReadOnly Property Firstname() As WhereParameter
                Get
                    If _Firstname_W Is Nothing Then
                        _Firstname_W = TearOff.Firstname
                    End If
                    Return _Firstname_W
                End Get
            End Property

            Public ReadOnly Property Middlename() As WhereParameter
                Get
                    If _Middlename_W Is Nothing Then
                        _Middlename_W = TearOff.Middlename
                    End If
                    Return _Middlename_W
                End Get
            End Property

            Public ReadOnly Property Surname() As WhereParameter
                Get
                    If _Surname_W Is Nothing Then
                        _Surname_W = TearOff.Surname
                    End If
                    Return _Surname_W
                End Get
            End Property

            Public ReadOnly Property Password() As WhereParameter
                Get
                    If _Password_W Is Nothing Then
                        _Password_W = TearOff.Password
                    End If
                    Return _Password_W
                End Get
            End Property

            Public ReadOnly Property ResidenceStreet() As WhereParameter
                Get
                    If _ResidenceStreet_W Is Nothing Then
                        _ResidenceStreet_W = TearOff.ResidenceStreet
                    End If
                    Return _ResidenceStreet_W
                End Get
            End Property

            Public ReadOnly Property ResidenceStateId() As WhereParameter
                Get
                    If _ResidenceStateId_W Is Nothing Then
                        _ResidenceStateId_W = TearOff.ResidenceStateId
                    End If
                    Return _ResidenceStateId_W
                End Get
            End Property

            Public ReadOnly Property ResidenceCountryId() As WhereParameter
                Get
                    If _ResidenceCountryId_W Is Nothing Then
                        _ResidenceCountryId_W = TearOff.ResidenceCountryId
                    End If
                    Return _ResidenceCountryId_W
                End Get
            End Property

            Public ReadOnly Property Sex() As WhereParameter
                Get
                    If _Sex_W Is Nothing Then
                        _Sex_W = TearOff.Sex
                    End If
                    Return _Sex_W
                End Get
            End Property

            Public ReadOnly Property DepartmentId() As WhereParameter
                Get
                    If _DepartmentId_W Is Nothing Then
                        _DepartmentId_W = TearOff.DepartmentId
                    End If
                    Return _DepartmentId_W
                End Get
            End Property

            Private _CustomerId_W As WhereParameter = Nothing
            Private _CustomerCode_W As WhereParameter = Nothing
            Private _CustomerRef_W As WhereParameter = Nothing
            Private _DateOfBirth_W As WhereParameter = Nothing
            Private _Email_W As WhereParameter = Nothing
            Private _Telephone_W As WhereParameter = Nothing
            Private _MaritalStatus_W As WhereParameter = Nothing
            Private _Firstname_W As WhereParameter = Nothing
            Private _Middlename_W As WhereParameter = Nothing
            Private _Surname_W As WhereParameter = Nothing
            Private _Password_W As WhereParameter = Nothing
            Private _ResidenceStreet_W As WhereParameter = Nothing
            Private _ResidenceStateId_W As WhereParameter = Nothing
            Private _ResidenceCountryId_W As WhereParameter = Nothing
            Private _Sex_W As WhereParameter = Nothing
            Private _DepartmentId_W As WhereParameter = Nothing

            Public Sub WhereClauseReset()

                _CustomerId_W = Nothing
                _CustomerCode_W = Nothing
                _CustomerRef_W = Nothing
                _DateOfBirth_W = Nothing
                _Email_W = Nothing
                _Telephone_W = Nothing
                _MaritalStatus_W = Nothing
                _Firstname_W = Nothing
                _Middlename_W = Nothing
                _Surname_W = Nothing
                _Password_W = Nothing
                _ResidenceStreet_W = Nothing
                _ResidenceStateId_W = Nothing
                _ResidenceCountryId_W = Nothing
                _Sex_W = Nothing
                _DepartmentId_W = Nothing
                Me._entity.Query.FlushWhereParameters()

            End Sub

            Private _entity As EasyObject
            Private _tearOff As TearOffWhereParameter
        End Class

        Public ReadOnly Property Where() As WhereClause
            Get
                If _whereClause Is Nothing Then
                    _whereClause = New WhereClause(Me)
                End If

                Return _whereClause
            End Get
        End Property

        Private _whereClause As WhereClause = Nothing
#End Region

#Region " Aggregate Clause "
        Public Class AggregateClause

            Public Sub New(ByVal entity As EasyObject)
                Me._entity = entity
            End Sub

            Public ReadOnly Property TearOff() As TearOffAggregateParameter
                Get
                    If _tearOff Is Nothing Then
                        _tearOff = New TearOffAggregateParameter(Me)
                    End If

                    Return _tearOff
                End Get
            End Property

#Region " TearOff's "
            Public Class TearOffAggregateParameter

                Private _clause As AggregateClause

                Public Sub New(ByVal clause As AggregateClause)
                    Me._clause = clause
                End Sub

                Public ReadOnly Property CustomerId() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.CustomerId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property CustomerCode() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.CustomerCode)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property CustomerRef() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.CustomerRef)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property DateOfBirth() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.DateOfBirth)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Email() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Email)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Telephone() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Telephone)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property MaritalStatus() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.MaritalStatus)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Firstname() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Firstname)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Middlename() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Middlename)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Surname() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Surname)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Password() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Password)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property ResidenceStreet() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.ResidenceStreet)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property ResidenceStateId() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.ResidenceStateId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property ResidenceCountryId() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.ResidenceCountryId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property Sex() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.Sex)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

                Public ReadOnly Property DepartmentId() As AggregateParameter
                    Get
                        Dim ap As AggregateParameter = New AggregateParameter(Core_CustomerSchema.DepartmentId)
                        Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                        query.AddAggregateParameter(ap)
                        Return ap
                    End Get
                End Property

            End Class

#End Region

            Public ReadOnly Property CustomerId() As AggregateParameter
                Get
                    If _CustomerId_W Is Nothing Then
                        _CustomerId_W = TearOff.CustomerId
                    End If
                    Return _CustomerId_W
                End Get
            End Property

            Public ReadOnly Property CustomerCode() As AggregateParameter
                Get
                    If _CustomerCode_W Is Nothing Then
                        _CustomerCode_W = TearOff.CustomerCode
                    End If
                    Return _CustomerCode_W
                End Get
            End Property

            Public ReadOnly Property CustomerRef() As AggregateParameter
                Get
                    If _CustomerRef_W Is Nothing Then
                        _CustomerRef_W = TearOff.CustomerRef
                    End If
                    Return _CustomerRef_W
                End Get
            End Property

            Public ReadOnly Property DateOfBirth() As AggregateParameter
                Get
                    If _DateOfBirth_W Is Nothing Then
                        _DateOfBirth_W = TearOff.DateOfBirth
                    End If
                    Return _DateOfBirth_W
                End Get
            End Property

            Public ReadOnly Property Email() As AggregateParameter
                Get
                    If _Email_W Is Nothing Then
                        _Email_W = TearOff.Email
                    End If
                    Return _Email_W
                End Get
            End Property

            Public ReadOnly Property Telephone() As AggregateParameter
                Get
                    If _Telephone_W Is Nothing Then
                        _Telephone_W = TearOff.Telephone
                    End If
                    Return _Telephone_W
                End Get
            End Property

            Public ReadOnly Property MaritalStatus() As AggregateParameter
                Get
                    If _MaritalStatus_W Is Nothing Then
                        _MaritalStatus_W = TearOff.MaritalStatus
                    End If
                    Return _MaritalStatus_W
                End Get
            End Property

            Public ReadOnly Property Firstname() As AggregateParameter
                Get
                    If _Firstname_W Is Nothing Then
                        _Firstname_W = TearOff.Firstname
                    End If
                    Return _Firstname_W
                End Get
            End Property

            Public ReadOnly Property Middlename() As AggregateParameter
                Get
                    If _Middlename_W Is Nothing Then
                        _Middlename_W = TearOff.Middlename
                    End If
                    Return _Middlename_W
                End Get
            End Property

            Public ReadOnly Property Surname() As AggregateParameter
                Get
                    If _Surname_W Is Nothing Then
                        _Surname_W = TearOff.Surname
                    End If
                    Return _Surname_W
                End Get
            End Property

            Public ReadOnly Property Password() As AggregateParameter
                Get
                    If _Password_W Is Nothing Then
                        _Password_W = TearOff.Password
                    End If
                    Return _Password_W
                End Get
            End Property

            Public ReadOnly Property ResidenceStreet() As AggregateParameter
                Get
                    If _ResidenceStreet_W Is Nothing Then
                        _ResidenceStreet_W = TearOff.ResidenceStreet
                    End If
                    Return _ResidenceStreet_W
                End Get
            End Property

            Public ReadOnly Property ResidenceStateId() As AggregateParameter
                Get
                    If _ResidenceStateId_W Is Nothing Then
                        _ResidenceStateId_W = TearOff.ResidenceStateId
                    End If
                    Return _ResidenceStateId_W
                End Get
            End Property

            Public ReadOnly Property ResidenceCountryId() As AggregateParameter
                Get
                    If _ResidenceCountryId_W Is Nothing Then
                        _ResidenceCountryId_W = TearOff.ResidenceCountryId
                    End If
                    Return _ResidenceCountryId_W
                End Get
            End Property

            Public ReadOnly Property Sex() As AggregateParameter
                Get
                    If _Sex_W Is Nothing Then
                        _Sex_W = TearOff.Sex
                    End If
                    Return _Sex_W
                End Get
            End Property

            Public ReadOnly Property DepartmentId() As AggregateParameter
                Get
                    If _DepartmentId_W Is Nothing Then
                        _DepartmentId_W = TearOff.DepartmentId
                    End If
                    Return _DepartmentId_W
                End Get
            End Property

            Private _CustomerId_W As AggregateParameter = Nothing
            Private _CustomerCode_W As AggregateParameter = Nothing
            Private _CustomerRef_W As AggregateParameter = Nothing
            Private _DateOfBirth_W As AggregateParameter = Nothing
            Private _Email_W As AggregateParameter = Nothing
            Private _Telephone_W As AggregateParameter = Nothing
            Private _MaritalStatus_W As AggregateParameter = Nothing
            Private _Firstname_W As AggregateParameter = Nothing
            Private _Middlename_W As AggregateParameter = Nothing
            Private _Surname_W As AggregateParameter = Nothing
            Private _Password_W As AggregateParameter = Nothing
            Private _ResidenceStreet_W As AggregateParameter = Nothing
            Private _ResidenceStateId_W As AggregateParameter = Nothing
            Private _ResidenceCountryId_W As AggregateParameter = Nothing
            Private _Sex_W As AggregateParameter = Nothing
            Private _DepartmentId_W As AggregateParameter = Nothing

            Public Sub AggregateClauseReset()

                _CustomerId_W = Nothing
                _CustomerCode_W = Nothing
                _CustomerRef_W = Nothing
                _DateOfBirth_W = Nothing
                _Email_W = Nothing
                _Telephone_W = Nothing
                _MaritalStatus_W = Nothing
                _Firstname_W = Nothing
                _Middlename_W = Nothing
                _Surname_W = Nothing
                _Password_W = Nothing
                _ResidenceStreet_W = Nothing
                _ResidenceStateId_W = Nothing
                _ResidenceCountryId_W = Nothing
                _Sex_W = Nothing
                _DepartmentId_W = Nothing
                Me._entity.Query.FlushAggregateParameters()

            End Sub

            Private _entity As EasyObject
            Private _tearOff As TearOffAggregateParameter
        End Class

        Public ReadOnly Property Aggregate() As AggregateClause
            Get
                If _aggregateClause Is Nothing Then
                    _aggregateClause = New AggregateClause(Me)
                End If

                Return _aggregateClause
            End Get
        End Property

        Private _aggregateClause As AggregateClause = Nothing
#End Region

    End Class

End NameSpace


