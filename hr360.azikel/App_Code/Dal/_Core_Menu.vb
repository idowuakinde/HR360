'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


NameSpace DbEntities

#Region " Schema "

Public Class Core_MenuSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared MenuId As New SchemaItem("MenuId", DbType.Int32, True, False, False, True, False, False)
	Public Shared MenuName As New SchemaItem("MenuName", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
	Public Shared MenuUrl As New SchemaItem("MenuUrl", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
	Public Shared MenuTarget As New SchemaItem("MenuTarget", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
	Public Shared MenuOrder As New SchemaItem("MenuOrder", DbType.Int32, False, True, False, False, False, False)
	Public Shared ModuleId As New SchemaItem("ModuleId", DbType.Int32, False, False, False, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(Core_MenuSchema.MenuId)
				_entries.Add(Core_MenuSchema.MenuName)
				_entries.Add(Core_MenuSchema.MenuUrl)
				_entries.Add(Core_MenuSchema.MenuTarget)
				_entries.Add(Core_MenuSchema.MenuOrder)
				_entries.Add(Core_MenuSchema.ModuleId)
			End If
            Return _entries
        End Get
    End Property

	Public Shared ReadOnly Property HasAutoKey() As Boolean
        Get
            Return True
        End Get
    End Property

    Public Shared ReadOnly Property HasRowID() As Boolean
        Get
            Return False
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _Core_Menu
    Inherits EasyObject

    Sub New()
        Dim _schema As New Core_MenuSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "dbo"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="MenuId"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal MenuId As Integer) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(Core_MenuSchema.MenuId.FieldName, MenuId)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Select_Core_Menu", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Me.Where.MenuId.Value = MenuId
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_SelectAll_Core_Menu", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()
		Me.ApplyDefaults()
	End Sub

	''' <summary>
	''' Apply any default values to columns
	''' </summary>
	Protected Overrides Sub ApplyDefaults()
	End Sub

    Protected Overrides Function GetInsertCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Insert_Core_Menu"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
				
				db.AddParameter(dbCommand, "MenuId", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "MenuId", DataRowVersion.Default, Convert.DBNull)
				CreateParameters(db, dbCommand)

			Case CommandType.Text
                Me.Query.ClearAll()
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
                    If Not item.IsComputed Then
                        If (item.IsAutoKey AndAlso Me.IdentityInsert) OrElse Not item.IsAutoKey Then
                            Me.Query.AddInsertColumn(item)
                        End If
                    End If
				Next
				dbCommand = Me.Query.GetInsertCommandWrapper()

				dbCommand.Parameters.Clear()
				If Me.IdentityInsert Then
					db.AddInParameter(dbCommand, "MenuId", DbType.Int32, "MenuId", DataRowVersion.Default)
				Else
					db.AddParameter(dbCommand, "MenuId", DbType.Int32, 0, ParameterDirection.Output, True, 0, 0, "MenuId", DataRowVersion.Default, Convert.DBNull)
				End If

				CreateParameters(db, dbCommand)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Overrides Function GetUpdateCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Update_Core_Menu"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				db.AddInParameter(dbCommand, "MenuId", DbType.Int32, "MenuId", DataRowVersion.Current)
				CreateParameters(db, dbCommand)

			Case CommandType.Text
                Me.Query.ClearAll()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddUpdateColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.MenuId.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetUpdateCommandWrapper()

				dbCommand.Parameters.Clear()
				CreateParameters(db, dbCommand)
				db.AddInParameter(dbCommand, "MenuId", DbType.Int32, "MenuId", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Overrides Function GetDeleteCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Delete_Core_Menu"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				' Add primary key parameters
				db.AddInParameter(dbCommand, "MenuId", DbType.Int32, "MenuId", DataRowVersion.Current)

			Case CommandType.Text
                Me.Query.ClearAll()
				Me.Where.WhereClauseReset()
				Me.Where.MenuId.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetDeleteCommandWrapper()

				dbCommand.Parameters.Clear()
				db.AddInParameter(dbCommand, "MenuId", DbType.Int32, "MenuId", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Private Sub CreateParameters(ByVal db As Database, ByVal dbCommand As DbCommand)
		
		db.AddInParameter(dbCommand, "MenuName", DbType.AnsiString, "MenuName", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "MenuUrl", DbType.AnsiString, "MenuUrl", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "MenuTarget", DbType.AnsiString, "MenuTarget", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "MenuOrder", DbType.Int32, "MenuOrder", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "ModuleId", DbType.Int32, "ModuleId", DataRowVersion.Current)

    End Sub

#Region " Properties "

	Public Overridable Property MenuId() As Integer
        Get
			Return Me.GetInteger(Core_MenuSchema.MenuId.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(Core_MenuSchema.MenuId.FieldName, Value)
      End Set
    End Property

	Public Overridable Property MenuName() As String
        Get
			Return Me.GetString(Core_MenuSchema.MenuName.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_MenuSchema.MenuName.FieldName, Value)
      End Set
    End Property

	Public Overridable Property MenuUrl() As String
        Get
			Return Me.GetString(Core_MenuSchema.MenuUrl.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_MenuSchema.MenuUrl.FieldName, Value)
      End Set
    End Property

	Public Overridable Property MenuTarget() As String
        Get
			Return Me.GetString(Core_MenuSchema.MenuTarget.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_MenuSchema.MenuTarget.FieldName, Value)
      End Set
    End Property

	Public Overridable Property MenuOrder() As Integer
        Get
			Return Me.GetInteger(Core_MenuSchema.MenuOrder.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(Core_MenuSchema.MenuOrder.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ModuleId() As Integer
        Get
			Return Me.GetInteger(Core_MenuSchema.ModuleId.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(Core_MenuSchema.ModuleId.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "Core_Menu"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_MenuId As String
			Get
				If Me.IsColumnNull(Core_MenuSchema.MenuId.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(Core_MenuSchema.MenuId.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_MenuSchema.MenuId.FieldName)
				Else
					Me.MenuId = MyBase.SetIntegerAsString(Core_MenuSchema.MenuId.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_MenuName As String
			Get
				If Me.IsColumnNull(Core_MenuSchema.MenuName.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_MenuSchema.MenuName.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_MenuSchema.MenuName.FieldName)
				Else
					Me.MenuName = MyBase.SetStringAsString(Core_MenuSchema.MenuName.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_MenuUrl As String
			Get
				If Me.IsColumnNull(Core_MenuSchema.MenuUrl.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_MenuSchema.MenuUrl.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_MenuSchema.MenuUrl.FieldName)
				Else
					Me.MenuUrl = MyBase.SetStringAsString(Core_MenuSchema.MenuUrl.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_MenuTarget As String
			Get
				If Me.IsColumnNull(Core_MenuSchema.MenuTarget.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_MenuSchema.MenuTarget.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_MenuSchema.MenuTarget.FieldName)
				Else
					Me.MenuTarget = MyBase.SetStringAsString(Core_MenuSchema.MenuTarget.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_MenuOrder As String
			Get
				If Me.IsColumnNull(Core_MenuSchema.MenuOrder.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(Core_MenuSchema.MenuOrder.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_MenuSchema.MenuOrder.FieldName)
				Else
					Me.MenuOrder = MyBase.SetIntegerAsString(Core_MenuSchema.MenuOrder.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ModuleId As String
			Get
				If Me.IsColumnNull(Core_MenuSchema.ModuleId.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(Core_MenuSchema.ModuleId.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_MenuSchema.ModuleId.FieldName)
				Else
					Me.ModuleId = MyBase.SetIntegerAsString(Core_MenuSchema.ModuleId.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property MenuId() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_MenuSchema.MenuId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property MenuName() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_MenuSchema.MenuName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property MenuUrl() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_MenuSchema.MenuUrl)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property MenuTarget() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_MenuSchema.MenuTarget)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property MenuOrder() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_MenuSchema.MenuOrder)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ModuleId() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_MenuSchema.ModuleId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property MenuId() As WhereParameter 
			Get
				If _MenuId_W Is Nothing Then
					_MenuId_W = TearOff.MenuId
				End If
				Return _MenuId_W
			End Get
		End Property

		Public ReadOnly Property MenuName() As WhereParameter 
			Get
				If _MenuName_W Is Nothing Then
					_MenuName_W = TearOff.MenuName
				End If
				Return _MenuName_W
			End Get
		End Property

		Public ReadOnly Property MenuUrl() As WhereParameter 
			Get
				If _MenuUrl_W Is Nothing Then
					_MenuUrl_W = TearOff.MenuUrl
				End If
				Return _MenuUrl_W
			End Get
		End Property

		Public ReadOnly Property MenuTarget() As WhereParameter 
			Get
				If _MenuTarget_W Is Nothing Then
					_MenuTarget_W = TearOff.MenuTarget
				End If
				Return _MenuTarget_W
			End Get
		End Property

		Public ReadOnly Property MenuOrder() As WhereParameter 
			Get
				If _MenuOrder_W Is Nothing Then
					_MenuOrder_W = TearOff.MenuOrder
				End If
				Return _MenuOrder_W
			End Get
		End Property

		Public ReadOnly Property ModuleId() As WhereParameter 
			Get
				If _ModuleId_W Is Nothing Then
					_ModuleId_W = TearOff.ModuleId
				End If
				Return _ModuleId_W
			End Get
		End Property

		Private _MenuId_W As WhereParameter = Nothing
		Private _MenuName_W As WhereParameter = Nothing
		Private _MenuUrl_W As WhereParameter = Nothing
		Private _MenuTarget_W As WhereParameter = Nothing
		Private _MenuOrder_W As WhereParameter = Nothing
		Private _ModuleId_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_MenuId_W = Nothing
		_MenuName_W = Nothing
		_MenuUrl_W = Nothing
		_MenuTarget_W = Nothing
		_MenuOrder_W = Nothing
		_ModuleId_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property MenuId() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_MenuSchema.MenuId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property MenuName() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_MenuSchema.MenuName)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property MenuUrl() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_MenuSchema.MenuUrl)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property MenuTarget() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_MenuSchema.MenuTarget)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property MenuOrder() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_MenuSchema.MenuOrder)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ModuleId() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_MenuSchema.ModuleId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property MenuId() As AggregateParameter 
			Get
				If _MenuId_W Is Nothing Then
					_MenuId_W = TearOff.MenuId
				End If
				Return _MenuId_W
			End Get
		End Property

		Public ReadOnly Property MenuName() As AggregateParameter 
			Get
				If _MenuName_W Is Nothing Then
					_MenuName_W = TearOff.MenuName
				End If
				Return _MenuName_W
			End Get
		End Property

		Public ReadOnly Property MenuUrl() As AggregateParameter 
			Get
				If _MenuUrl_W Is Nothing Then
					_MenuUrl_W = TearOff.MenuUrl
				End If
				Return _MenuUrl_W
			End Get
		End Property

		Public ReadOnly Property MenuTarget() As AggregateParameter 
			Get
				If _MenuTarget_W Is Nothing Then
					_MenuTarget_W = TearOff.MenuTarget
				End If
				Return _MenuTarget_W
			End Get
		End Property

		Public ReadOnly Property MenuOrder() As AggregateParameter 
			Get
				If _MenuOrder_W Is Nothing Then
					_MenuOrder_W = TearOff.MenuOrder
				End If
				Return _MenuOrder_W
			End Get
		End Property

		Public ReadOnly Property ModuleId() As AggregateParameter 
			Get
				If _ModuleId_W Is Nothing Then
					_ModuleId_W = TearOff.ModuleId
				End If
				Return _ModuleId_W
			End Get
		End Property

		Private _MenuId_W As AggregateParameter = Nothing
		Private _MenuName_W As AggregateParameter = Nothing
		Private _MenuUrl_W As AggregateParameter = Nothing
		Private _MenuTarget_W As AggregateParameter = Nothing
		Private _MenuOrder_W As AggregateParameter = Nothing
		Private _ModuleId_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_MenuId_W = Nothing
		_MenuName_W = Nothing
		_MenuUrl_W = Nothing
		_MenuTarget_W = Nothing
		_MenuOrder_W = Nothing
		_ModuleId_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class

End NameSpace


