'===============================================================================
'  Generated From - VbNet_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject 
'      Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.2)

Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Configuration
Imports System.Collections
Imports System.Collections.Specialized
Imports System.Xml
Imports System.IO

Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports NCI.EasyObjects


NameSpace DbEntities

#Region " Schema "

Public Class Core_UserSchema
	Inherits NCI.EasyObjects.Schema

    Private Shared _entries As ArrayList
	Public Shared UserId As New SchemaItem("UserId", DbType.Int64, True, False, False, True, False, False)
	Public Shared UserCode As New SchemaItem("UserCode", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, True)
	Public Shared Username As New SchemaItem("Username", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
	Public Shared DateOfBirth As New SchemaItem("DateOfBirth", DbType.DateTime, False, False, False, False, False, False)
	Public Shared Email As New SchemaItem("Email", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
	Public Shared Telephone As New SchemaItem("Telephone", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
	Public Shared MaritalStatus As New SchemaItem("MaritalStatus", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, False, False, False, False)
	Public Shared Firstname As New SchemaItem("Firstname", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
	Public Shared Middlename As New SchemaItem("Middlename", DbType.AnsiString, SchemaItemJustify.None, 50, True, False, False, False)
	Public Shared Surname As New SchemaItem("Surname", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
	Public Shared Password As New SchemaItem("Password", DbType.AnsiString, SchemaItemJustify.None, 50, False, False, False, False)
	Public Shared ResidenceStreet As New SchemaItem("ResidenceStreet", DbType.AnsiString, SchemaItemJustify.None, 200, False, False, False, False)
	Public Shared ResidenceStateId As New SchemaItem("ResidenceStateId", DbType.Int32, False, False, False, False, False, False)
	Public Shared ResidenceCountryId As New SchemaItem("ResidenceCountryId", DbType.Int32, False, False, False, False, False, False)
	Public Shared Sex As New SchemaItem("Sex", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, False, False, False, False)
	Public Shared DepartmentId As New SchemaItem("DepartmentId", DbType.Int32, False, False, False, False, False, False)

    Public Overrides ReadOnly Property SchemaEntries() As ArrayList
        Get
            If _entries Is Nothing Then
                _entries = New ArrayList()
				_entries.Add(Core_UserSchema.UserId)
				_entries.Add(Core_UserSchema.UserCode)
				_entries.Add(Core_UserSchema.Username)
				_entries.Add(Core_UserSchema.DateOfBirth)
				_entries.Add(Core_UserSchema.Email)
				_entries.Add(Core_UserSchema.Telephone)
				_entries.Add(Core_UserSchema.MaritalStatus)
				_entries.Add(Core_UserSchema.Firstname)
				_entries.Add(Core_UserSchema.Middlename)
				_entries.Add(Core_UserSchema.Surname)
				_entries.Add(Core_UserSchema.Password)
				_entries.Add(Core_UserSchema.ResidenceStreet)
				_entries.Add(Core_UserSchema.ResidenceStateId)
				_entries.Add(Core_UserSchema.ResidenceCountryId)
				_entries.Add(Core_UserSchema.Sex)
				_entries.Add(Core_UserSchema.DepartmentId)
			End If
            Return _entries
        End Get
    End Property

	Public Shared ReadOnly Property HasAutoKey() As Boolean
        Get
            Return True
        End Get
    End Property

    Public Shared ReadOnly Property HasRowID() As Boolean
        Get
            Return False
        End Get
    End Property

End Class

#End Region

Public MustInherit Class _Core_User
    Inherits EasyObject

    Sub New()
        Dim _schema As New Core_UserSchema()
        Me.SchemaEntries = _schema.SchemaEntries
		Me.SchemaGlobal = "dbo"
    End Sub

	Public Overrides Sub FlushData()
		Me._whereClause = Nothing
		Me._aggregateClause = Nothing
		MyBase.FlushData()
	End Sub
		
	''' <summary>
	''' Loads the business object with info from the database, based on the requested primary key.
	''' </summary>
	''' <param name="UserId"></param>
	''' <returns>A Boolean indicating success or failure of the query</returns>
	Public Function LoadByPrimaryKey(ByVal UserId As Long) As Boolean
		
		Select Case Me.DefaultCommandType
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = New ListDictionary

				' Add in parameters
				parameters.Add(Core_UserSchema.UserId.FieldName, UserId)

				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Select_Core_User", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Me.Where.UserId.Value = UserId
				Return Me.Query.Load()

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select
		
	End Function

    ''' <summary>
    ''' Loads all records from the table.
    ''' </summary>
    ''' <returns>A Boolean indicating success or failure of the query</returns>
    Public Function LoadAll() As Boolean
	
		Select Case Me.DefaultCommandType
		
			Case CommandType.StoredProcedure
				Dim parameters As ListDictionary = Nothing
				Return MyBase.LoadFromSql(Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_SelectAll_Core_User", parameters, CommandType.StoredProcedure)
				
			Case CommandType.Text
                Me.Query.ClearAll()
                Me.Where.WhereClauseReset()
				Return Me.Query.Load()
			
			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

    End Function

    ''' <summary>
    ''' Adds a new record to the internal table.
    ''' </summary>
	Public Overrides Sub AddNew()
		MyBase.AddNew()
		Me.ApplyDefaults()
	End Sub

	''' <summary>
	''' Apply any default values to columns
	''' </summary>
	Protected Overrides Sub ApplyDefaults()
            Me.UserCode = Guid.NewGuid.ToString
	End Sub

    Protected Overrides Function GetInsertCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand
		
        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Insert_Core_User"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
				
				db.AddParameter(dbCommand, "UserId", DbType.Int64, 0, ParameterDirection.Output, True, 0, 0, "UserId", DataRowVersion.Default, Convert.DBNull)
				CreateParameters(db, dbCommand)

			Case CommandType.Text
                Me.Query.ClearAll()
				Me.Where.WhereClauseReset()
				For Each item As SchemaItem In Me.SchemaEntries
                    If Not item.IsComputed Then
                        If (item.IsAutoKey AndAlso Me.IdentityInsert) OrElse Not item.IsAutoKey Then
                            Me.Query.AddInsertColumn(item)
                        End If
                    End If
				Next
				dbCommand = Me.Query.GetInsertCommandWrapper()

				dbCommand.Parameters.Clear()
				If Me.IdentityInsert Then
					db.AddInParameter(dbCommand, "UserId", DbType.Int64, "UserId", DataRowVersion.Default)
				Else
					db.AddParameter(dbCommand, "UserId", DbType.Int64, 0, ParameterDirection.Output, True, 0, 0, "UserId", DataRowVersion.Default, Convert.DBNull)
				End If

				CreateParameters(db, dbCommand)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Overrides Function GetUpdateCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Update_Core_User"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				db.AddInParameter(dbCommand, "UserId", DbType.Int64, "UserId", DataRowVersion.Current)
				CreateParameters(db, dbCommand)

			Case CommandType.Text
                Me.Query.ClearAll()
				For Each item As SchemaItem In Me.SchemaEntries
					If Not (item.IsAutoKey OrElse item.IsComputed)
						Me.Query.AddUpdateColumn(item)
					End If
				Next

				Me.Where.WhereClauseReset()
				Me.Where.UserId.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetUpdateCommandWrapper()

				dbCommand.Parameters.Clear()
				CreateParameters(db, dbCommand)
				db.AddInParameter(dbCommand, "UserId", DbType.Int64, "UserId", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Protected Overrides Function GetDeleteCommand(commandType As CommandType) As DbCommand
	
		Dim dbCommand As DbCommand

        ' Create the Database object, using the default database service. The
        ' default database service is determined through configuration.
        Dim db As Database = GetDatabase()
	
		Select Case commandType
		
			Case CommandType.StoredProcedure
				Dim sqlCommand As String = Me.SchemaStoredProcedureWithSeparator & "STP_METADATA_Delete_Core_User"
				dbCommand = db.GetStoredProcCommand(sqlCommand)
		
				' Add primary key parameters
				db.AddInParameter(dbCommand, "UserId", DbType.Int64, "UserId", DataRowVersion.Current)

			Case CommandType.Text
                Me.Query.ClearAll()
				Me.Where.WhereClauseReset()
				Me.Where.UserId.Operator = WhereParameter.Operand.Equal
				dbCommand = Me.Query.GetDeleteCommandWrapper()

				dbCommand.Parameters.Clear()
				db.AddInParameter(dbCommand, "UserId", DbType.Int64, "UserId", DataRowVersion.Current)

			Case Else
				Throw New ArgumentException("Invalid CommandType", "commandType")
				
		End Select

        Return dbCommand

    End Function

    Private Sub CreateParameters(ByVal db As Database, ByVal dbCommand As DbCommand)
		
		db.AddInParameter(dbCommand, "UserCode", DbType.AnsiString, "UserCode", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Username", DbType.AnsiString, "Username", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "DateOfBirth", DbType.DateTime, "DateOfBirth", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Email", DbType.AnsiString, "Email", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Telephone", DbType.AnsiString, "Telephone", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "MaritalStatus", DbType.AnsiStringFixedLength, "MaritalStatus", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Firstname", DbType.AnsiString, "Firstname", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Middlename", DbType.AnsiString, "Middlename", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Surname", DbType.AnsiString, "Surname", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Password", DbType.AnsiString, "Password", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "ResidenceStreet", DbType.AnsiString, "ResidenceStreet", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "ResidenceStateId", DbType.Int32, "ResidenceStateId", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "ResidenceCountryId", DbType.Int32, "ResidenceCountryId", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "Sex", DbType.AnsiStringFixedLength, "Sex", DataRowVersion.Current)
		db.AddInParameter(dbCommand, "DepartmentId", DbType.Int32, "DepartmentId", DataRowVersion.Current)

    End Sub

#Region " Properties "

	Public Overridable Property UserId() As Long
        Get
			Return Me.GetLong(Core_UserSchema.UserId.FieldName)
      End Get
        Set(ByVal Value As Long)
			Me.SetLong(Core_UserSchema.UserId.FieldName, Value)
      End Set
    End Property

	Public Overridable Property UserCode() As String
        Get
			Return Me.GetString(Core_UserSchema.UserCode.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.UserCode.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Username() As String
        Get
			Return Me.GetString(Core_UserSchema.Username.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Username.FieldName, Value)
      End Set
    End Property

	Public Overridable Property DateOfBirth() As DateTime
        Get
			Return Me.GetDateTime(Core_UserSchema.DateOfBirth.FieldName)
      End Get
        Set(ByVal Value As DateTime)
			Me.SetDateTime(Core_UserSchema.DateOfBirth.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Email() As String
        Get
			Return Me.GetString(Core_UserSchema.Email.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Email.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Telephone() As String
        Get
			Return Me.GetString(Core_UserSchema.Telephone.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Telephone.FieldName, Value)
      End Set
    End Property

	Public Overridable Property MaritalStatus() As String
        Get
			Return Me.GetString(Core_UserSchema.MaritalStatus.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.MaritalStatus.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Firstname() As String
        Get
			Return Me.GetString(Core_UserSchema.Firstname.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Firstname.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Middlename() As String
        Get
			Return Me.GetString(Core_UserSchema.Middlename.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Middlename.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Surname() As String
        Get
			Return Me.GetString(Core_UserSchema.Surname.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Surname.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Password() As String
        Get
			Return Me.GetString(Core_UserSchema.Password.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Password.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ResidenceStreet() As String
        Get
			Return Me.GetString(Core_UserSchema.ResidenceStreet.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.ResidenceStreet.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ResidenceStateId() As Integer
        Get
			Return Me.GetInteger(Core_UserSchema.ResidenceStateId.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(Core_UserSchema.ResidenceStateId.FieldName, Value)
      End Set
    End Property

	Public Overridable Property ResidenceCountryId() As Integer
        Get
			Return Me.GetInteger(Core_UserSchema.ResidenceCountryId.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(Core_UserSchema.ResidenceCountryId.FieldName, Value)
      End Set
    End Property

	Public Overridable Property Sex() As String
        Get
			Return Me.GetString(Core_UserSchema.Sex.FieldName)
      End Get
        Set(ByVal Value As String)
			Me.SetString(Core_UserSchema.Sex.FieldName, Value)
      End Set
    End Property

	Public Overridable Property DepartmentId() As Integer
        Get
			Return Me.GetInteger(Core_UserSchema.DepartmentId.FieldName)
      End Get
        Set(ByVal Value As Integer)
			Me.SetInteger(Core_UserSchema.DepartmentId.FieldName, Value)
      End Set
    End Property

    Public Overrides ReadOnly Property TableName() As String
        Get
            Return "Core_User"
        End Get
    End Property

#End Region

#Region " String Properties "
		Public Overridable Property s_UserId As String
			Get
				If Me.IsColumnNull(Core_UserSchema.UserId.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetLongAsString(Core_UserSchema.UserId.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.UserId.FieldName)
				Else
					Me.UserId = MyBase.SetLongAsString(Core_UserSchema.UserId.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_UserCode As String
			Get
				If Me.IsColumnNull(Core_UserSchema.UserCode.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.UserCode.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.UserCode.FieldName)
				Else
					Me.UserCode = MyBase.SetStringAsString(Core_UserSchema.UserCode.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Username As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Username.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Username.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Username.FieldName)
				Else
					Me.Username = MyBase.SetStringAsString(Core_UserSchema.Username.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DateOfBirth As String
			Get
				If Me.IsColumnNull(Core_UserSchema.DateOfBirth.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(Core_UserSchema.DateOfBirth.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.DateOfBirth.FieldName)
				Else
					Me.DateOfBirth = MyBase.SetDateTimeAsString(Core_UserSchema.DateOfBirth.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Email As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Email.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Email.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Email.FieldName)
				Else
					Me.Email = MyBase.SetStringAsString(Core_UserSchema.Email.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Telephone As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Telephone.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Telephone.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Telephone.FieldName)
				Else
					Me.Telephone = MyBase.SetStringAsString(Core_UserSchema.Telephone.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_MaritalStatus As String
			Get
				If Me.IsColumnNull(Core_UserSchema.MaritalStatus.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.MaritalStatus.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.MaritalStatus.FieldName)
				Else
					Me.MaritalStatus = MyBase.SetStringAsString(Core_UserSchema.MaritalStatus.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Firstname As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Firstname.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Firstname.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Firstname.FieldName)
				Else
					Me.Firstname = MyBase.SetStringAsString(Core_UserSchema.Firstname.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Middlename As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Middlename.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Middlename.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Middlename.FieldName)
				Else
					Me.Middlename = MyBase.SetStringAsString(Core_UserSchema.Middlename.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Surname As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Surname.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Surname.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Surname.FieldName)
				Else
					Me.Surname = MyBase.SetStringAsString(Core_UserSchema.Surname.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Password As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Password.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Password.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Password.FieldName)
				Else
					Me.Password = MyBase.SetStringAsString(Core_UserSchema.Password.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ResidenceStreet As String
			Get
				If Me.IsColumnNull(Core_UserSchema.ResidenceStreet.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.ResidenceStreet.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.ResidenceStreet.FieldName)
				Else
					Me.ResidenceStreet = MyBase.SetStringAsString(Core_UserSchema.ResidenceStreet.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ResidenceStateId As String
			Get
				If Me.IsColumnNull(Core_UserSchema.ResidenceStateId.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(Core_UserSchema.ResidenceStateId.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.ResidenceStateId.FieldName)
				Else
					Me.ResidenceStateId = MyBase.SetIntegerAsString(Core_UserSchema.ResidenceStateId.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ResidenceCountryId As String
			Get
				If Me.IsColumnNull(Core_UserSchema.ResidenceCountryId.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(Core_UserSchema.ResidenceCountryId.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.ResidenceCountryId.FieldName)
				Else
					Me.ResidenceCountryId = MyBase.SetIntegerAsString(Core_UserSchema.ResidenceCountryId.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Sex As String
			Get
				If Me.IsColumnNull(Core_UserSchema.Sex.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(Core_UserSchema.Sex.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.Sex.FieldName)
				Else
					Me.Sex = MyBase.SetStringAsString(Core_UserSchema.Sex.FieldName, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DepartmentId As String
			Get
				If Me.IsColumnNull(Core_UserSchema.DepartmentId.FieldName) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(Core_UserSchema.DepartmentId.FieldName)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(Core_UserSchema.DepartmentId.FieldName)
				Else
					Me.DepartmentId = MyBase.SetIntegerAsString(Core_UserSchema.DepartmentId.FieldName, Value)
				End If
			End Set
		End Property


#End Region

#Region " Where Clause "
    Public Class WhereClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffWhereParameter
		
			Private _clause as WhereClause
			
			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property UserId() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.UserId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property UserCode() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.UserCode)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Username() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Username)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property DateOfBirth() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.DateOfBirth)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Email() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Email)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Telephone() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Telephone)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property MaritalStatus() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.MaritalStatus)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Firstname() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Firstname)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Middlename() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Middlename)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Surname() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Surname)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Password() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Password)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ResidenceStreet() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.ResidenceStreet)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ResidenceStateId() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.ResidenceStateId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property ResidenceCountryId() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.ResidenceCountryId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property Sex() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.Sex)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

			Public ReadOnly Property DepartmentId() As WhereParameter
				Get
					Dim wp As WhereParameter = New WhereParameter(Core_UserSchema.DepartmentId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddWhereParameter(wp)
					Return wp
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property UserId() As WhereParameter 
			Get
				If _UserId_W Is Nothing Then
					_UserId_W = TearOff.UserId
				End If
				Return _UserId_W
			End Get
		End Property

		Public ReadOnly Property UserCode() As WhereParameter 
			Get
				If _UserCode_W Is Nothing Then
					_UserCode_W = TearOff.UserCode
				End If
				Return _UserCode_W
			End Get
		End Property

		Public ReadOnly Property Username() As WhereParameter 
			Get
				If _Username_W Is Nothing Then
					_Username_W = TearOff.Username
				End If
				Return _Username_W
			End Get
		End Property

		Public ReadOnly Property DateOfBirth() As WhereParameter 
			Get
				If _DateOfBirth_W Is Nothing Then
					_DateOfBirth_W = TearOff.DateOfBirth
				End If
				Return _DateOfBirth_W
			End Get
		End Property

		Public ReadOnly Property Email() As WhereParameter 
			Get
				If _Email_W Is Nothing Then
					_Email_W = TearOff.Email
				End If
				Return _Email_W
			End Get
		End Property

		Public ReadOnly Property Telephone() As WhereParameter 
			Get
				If _Telephone_W Is Nothing Then
					_Telephone_W = TearOff.Telephone
				End If
				Return _Telephone_W
			End Get
		End Property

		Public ReadOnly Property MaritalStatus() As WhereParameter 
			Get
				If _MaritalStatus_W Is Nothing Then
					_MaritalStatus_W = TearOff.MaritalStatus
				End If
				Return _MaritalStatus_W
			End Get
		End Property

		Public ReadOnly Property Firstname() As WhereParameter 
			Get
				If _Firstname_W Is Nothing Then
					_Firstname_W = TearOff.Firstname
				End If
				Return _Firstname_W
			End Get
		End Property

		Public ReadOnly Property Middlename() As WhereParameter 
			Get
				If _Middlename_W Is Nothing Then
					_Middlename_W = TearOff.Middlename
				End If
				Return _Middlename_W
			End Get
		End Property

		Public ReadOnly Property Surname() As WhereParameter 
			Get
				If _Surname_W Is Nothing Then
					_Surname_W = TearOff.Surname
				End If
				Return _Surname_W
			End Get
		End Property

		Public ReadOnly Property Password() As WhereParameter 
			Get
				If _Password_W Is Nothing Then
					_Password_W = TearOff.Password
				End If
				Return _Password_W
			End Get
		End Property

		Public ReadOnly Property ResidenceStreet() As WhereParameter 
			Get
				If _ResidenceStreet_W Is Nothing Then
					_ResidenceStreet_W = TearOff.ResidenceStreet
				End If
				Return _ResidenceStreet_W
			End Get
		End Property

		Public ReadOnly Property ResidenceStateId() As WhereParameter 
			Get
				If _ResidenceStateId_W Is Nothing Then
					_ResidenceStateId_W = TearOff.ResidenceStateId
				End If
				Return _ResidenceStateId_W
			End Get
		End Property

		Public ReadOnly Property ResidenceCountryId() As WhereParameter 
			Get
				If _ResidenceCountryId_W Is Nothing Then
					_ResidenceCountryId_W = TearOff.ResidenceCountryId
				End If
				Return _ResidenceCountryId_W
			End Get
		End Property

		Public ReadOnly Property Sex() As WhereParameter 
			Get
				If _Sex_W Is Nothing Then
					_Sex_W = TearOff.Sex
				End If
				Return _Sex_W
			End Get
		End Property

		Public ReadOnly Property DepartmentId() As WhereParameter 
			Get
				If _DepartmentId_W Is Nothing Then
					_DepartmentId_W = TearOff.DepartmentId
				End If
				Return _DepartmentId_W
			End Get
		End Property

		Private _UserId_W As WhereParameter = Nothing
		Private _UserCode_W As WhereParameter = Nothing
		Private _Username_W As WhereParameter = Nothing
		Private _DateOfBirth_W As WhereParameter = Nothing
		Private _Email_W As WhereParameter = Nothing
		Private _Telephone_W As WhereParameter = Nothing
		Private _MaritalStatus_W As WhereParameter = Nothing
		Private _Firstname_W As WhereParameter = Nothing
		Private _Middlename_W As WhereParameter = Nothing
		Private _Surname_W As WhereParameter = Nothing
		Private _Password_W As WhereParameter = Nothing
		Private _ResidenceStreet_W As WhereParameter = Nothing
		Private _ResidenceStateId_W As WhereParameter = Nothing
		Private _ResidenceCountryId_W As WhereParameter = Nothing
		Private _Sex_W As WhereParameter = Nothing
		Private _DepartmentId_W As WhereParameter = Nothing

		Public Sub WhereClauseReset()

		_UserId_W = Nothing
		_UserCode_W = Nothing
		_Username_W = Nothing
		_DateOfBirth_W = Nothing
		_Email_W = Nothing
		_Telephone_W = Nothing
		_MaritalStatus_W = Nothing
		_Firstname_W = Nothing
		_Middlename_W = Nothing
		_Surname_W = Nothing
		_Password_W = Nothing
		_ResidenceStreet_W = Nothing
		_ResidenceStateId_W = Nothing
		_ResidenceCountryId_W = Nothing
		_Sex_W = Nothing
		_DepartmentId_W = Nothing
			Me._entity.Query.FlushWhereParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region " Aggregate Clause "
    Public Class AggregateClause

        Public Sub New(ByVal entity As EasyObject)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region " TearOff's "
		Public class TearOffAggregateParameter
		
			Private _clause as AggregateClause
			
			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub

			Public ReadOnly Property UserId() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.UserId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property UserCode() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.UserCode)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Username() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Username)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property DateOfBirth() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.DateOfBirth)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Email() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Email)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Telephone() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Telephone)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property MaritalStatus() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.MaritalStatus)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Firstname() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Firstname)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Middlename() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Middlename)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Surname() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Surname)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Password() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Password)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ResidenceStreet() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.ResidenceStreet)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ResidenceStateId() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.ResidenceStateId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property ResidenceCountryId() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.ResidenceCountryId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property Sex() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.Sex)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

			Public ReadOnly Property DepartmentId() As AggregateParameter
				Get
					Dim ap As AggregateParameter = New AggregateParameter(Core_UserSchema.DepartmentId)
                    Dim query As NCI.EasyObjects.DynamicQuery = Me._clause._entity.Query
                    query.AddAggregateParameter(ap)
					Return ap
				End Get
			End Property

	End Class
	
	#End Region	

		Public ReadOnly Property UserId() As AggregateParameter 
			Get
				If _UserId_W Is Nothing Then
					_UserId_W = TearOff.UserId
				End If
				Return _UserId_W
			End Get
		End Property

		Public ReadOnly Property UserCode() As AggregateParameter 
			Get
				If _UserCode_W Is Nothing Then
					_UserCode_W = TearOff.UserCode
				End If
				Return _UserCode_W
			End Get
		End Property

		Public ReadOnly Property Username() As AggregateParameter 
			Get
				If _Username_W Is Nothing Then
					_Username_W = TearOff.Username
				End If
				Return _Username_W
			End Get
		End Property

		Public ReadOnly Property DateOfBirth() As AggregateParameter 
			Get
				If _DateOfBirth_W Is Nothing Then
					_DateOfBirth_W = TearOff.DateOfBirth
				End If
				Return _DateOfBirth_W
			End Get
		End Property

		Public ReadOnly Property Email() As AggregateParameter 
			Get
				If _Email_W Is Nothing Then
					_Email_W = TearOff.Email
				End If
				Return _Email_W
			End Get
		End Property

		Public ReadOnly Property Telephone() As AggregateParameter 
			Get
				If _Telephone_W Is Nothing Then
					_Telephone_W = TearOff.Telephone
				End If
				Return _Telephone_W
			End Get
		End Property

		Public ReadOnly Property MaritalStatus() As AggregateParameter 
			Get
				If _MaritalStatus_W Is Nothing Then
					_MaritalStatus_W = TearOff.MaritalStatus
				End If
				Return _MaritalStatus_W
			End Get
		End Property

		Public ReadOnly Property Firstname() As AggregateParameter 
			Get
				If _Firstname_W Is Nothing Then
					_Firstname_W = TearOff.Firstname
				End If
				Return _Firstname_W
			End Get
		End Property

		Public ReadOnly Property Middlename() As AggregateParameter 
			Get
				If _Middlename_W Is Nothing Then
					_Middlename_W = TearOff.Middlename
				End If
				Return _Middlename_W
			End Get
		End Property

		Public ReadOnly Property Surname() As AggregateParameter 
			Get
				If _Surname_W Is Nothing Then
					_Surname_W = TearOff.Surname
				End If
				Return _Surname_W
			End Get
		End Property

		Public ReadOnly Property Password() As AggregateParameter 
			Get
				If _Password_W Is Nothing Then
					_Password_W = TearOff.Password
				End If
				Return _Password_W
			End Get
		End Property

		Public ReadOnly Property ResidenceStreet() As AggregateParameter 
			Get
				If _ResidenceStreet_W Is Nothing Then
					_ResidenceStreet_W = TearOff.ResidenceStreet
				End If
				Return _ResidenceStreet_W
			End Get
		End Property

		Public ReadOnly Property ResidenceStateId() As AggregateParameter 
			Get
				If _ResidenceStateId_W Is Nothing Then
					_ResidenceStateId_W = TearOff.ResidenceStateId
				End If
				Return _ResidenceStateId_W
			End Get
		End Property

		Public ReadOnly Property ResidenceCountryId() As AggregateParameter 
			Get
				If _ResidenceCountryId_W Is Nothing Then
					_ResidenceCountryId_W = TearOff.ResidenceCountryId
				End If
				Return _ResidenceCountryId_W
			End Get
		End Property

		Public ReadOnly Property Sex() As AggregateParameter 
			Get
				If _Sex_W Is Nothing Then
					_Sex_W = TearOff.Sex
				End If
				Return _Sex_W
			End Get
		End Property

		Public ReadOnly Property DepartmentId() As AggregateParameter 
			Get
				If _DepartmentId_W Is Nothing Then
					_DepartmentId_W = TearOff.DepartmentId
				End If
				Return _DepartmentId_W
			End Get
		End Property

		Private _UserId_W As AggregateParameter = Nothing
		Private _UserCode_W As AggregateParameter = Nothing
		Private _Username_W As AggregateParameter = Nothing
		Private _DateOfBirth_W As AggregateParameter = Nothing
		Private _Email_W As AggregateParameter = Nothing
		Private _Telephone_W As AggregateParameter = Nothing
		Private _MaritalStatus_W As AggregateParameter = Nothing
		Private _Firstname_W As AggregateParameter = Nothing
		Private _Middlename_W As AggregateParameter = Nothing
		Private _Surname_W As AggregateParameter = Nothing
		Private _Password_W As AggregateParameter = Nothing
		Private _ResidenceStreet_W As AggregateParameter = Nothing
		Private _ResidenceStateId_W As AggregateParameter = Nothing
		Private _ResidenceCountryId_W As AggregateParameter = Nothing
		Private _Sex_W As AggregateParameter = Nothing
		Private _DepartmentId_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_UserId_W = Nothing
		_UserCode_W = Nothing
		_Username_W = Nothing
		_DateOfBirth_W = Nothing
		_Email_W = Nothing
		_Telephone_W = Nothing
		_MaritalStatus_W = Nothing
		_Firstname_W = Nothing
		_Middlename_W = Nothing
		_Surname_W = Nothing
		_Password_W = Nothing
		_ResidenceStreet_W = Nothing
		_ResidenceStateId_W = Nothing
		_ResidenceCountryId_W = Nothing
		_Sex_W = Nothing
		_DepartmentId_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As EasyObject
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

End Class

End NameSpace


